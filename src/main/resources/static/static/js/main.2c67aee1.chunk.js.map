{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["State","PingPong","props","customSetState","state","callback","isMounted","setState","fetchData","console","log","fetch","link","method","headers","Accept","then","response","ndjsonStream","body","exampleStream","reader","getReader","readingState","readableStream","closed","catch","e","dataRead","setCancel","cancelStream","nextReadCallback","releaseLock","cancel","read","result","value","data","done","injectPoisionPill","profile","id","pong","timeMs","this","React","Component","PingPongWrapper","pingPongRef","current","initPingPong","pingPong","localRef","createRef","ping","ref","setExecute","style","height","display","flexDirection","onClick","App","className","Array","fill","map","notUsed","n","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2c67aee1.chunk.js","sourcesContent":["import \"./App.css\";\nimport React from \"react\";\nimport ndjsonStream from \"can-ndjson-stream\";\n\nconst State = {\n  Init: \"Init\",\n  Reading: \"Reading\",\n  Closed: \"Closed\",\n  Canceled: \"Canceled\",\n  Canceling: \"Canceling\",\n  ExecutingCancel: \"Execute Cancel\",\n};\n\nconst link0 = \"/ping?delayMsLow=0&delayMsHigh=5000&times=100\";\nconst link1 = \"/load?delayMsLow=20&delayMsHigh=100&times=101\";\n\nclass PingPong extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: {},\n      readingState: State.Init,\n      readableStream: null,\n      reader: null,\n      isMounted: false,\n    };\n  }\n  // fetchData = async () => {\n  //   console.log(\"fetching data!\");\n  //   const response = await fetch(\"http://localhost:8080/ping\", {\n  //     method: \"GET\",\n  //     Accept: \"application/json\",\n  //   });\n\n  //   const exampleReader = ndjsonStream(response.body).getReader();\n  //   let result;\n  //   while (!result || !result.done) {\n  //     result = await exampleReader.read();\n  //     console.log(\"fetching data!\");\n  //     if (result.value) {\n  //       this.setState({ data: result.value });\n  //     }\n  //     console.log(result.done, result.value); //result.value is one line of your NDJSON data\n  //   }\n  // };\n\n  customSetState = (state, callback) => {\n    if (this.state.isMounted) {\n      this.setState(state, callback);\n    }\n  };\n\n  fetchData = () => {\n    console.log(\"Request created!\", this.props);\n\n    fetch(this.props.link, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/x-ndjson\",\n        Accept: \"application/x-ndjson\",\n      },\n    })\n      .then((response) => {\n        return ndjsonStream(response.body); //ndjsonStream parses the response.body\n      })\n      .then((exampleStream) => {\n        //retain access to the reader so that you can cancel it\n        const reader = exampleStream.getReader();\n        this.customSetState({\n          readingState: State.Reading,\n          readableStream: exampleStream,\n          reader: reader,\n        });\n\n        reader.closed\n          .then(() => {\n            this.customSetState({ readingState: State.Closed });\n          })\n          .catch((e) => {\n            this.customSetState({ readingState: State.Canceled });\n          });\n\n        this.dataRead(reader);\n      })\n      .catch((e) => console.log(e));\n  };\n\n  setCancel = () => {\n    if (this.state.readingState === State.Reading) {\n      this.customSetState({ readingState: State.Canceling });\n    }\n  };\n\n  cancelStream = (nextReadCallback) => {\n    if (\n      this.state.readingState === State.Canceling &&\n      this.state.readableStream &&\n      this.state.reader\n    ) {\n      this.customSetState({ readingState: State.ExecutingCancel });\n      this.state.reader.releaseLock();\n      this.state.readableStream\n        .cancel(\"Canceled\")\n        .then(() => console.log(\"Canceled promise!\"));\n    } else if (nextReadCallback) {\n      nextReadCallback();\n    }\n  };\n\n  dataRead = (reader) => {\n    reader.read().then((result) => {\n      if (result.value) {\n        this.customSetState({ data: result.value });\n      }\n\n      if (result.done) {\n        return;\n      }\n\n      this.cancelStream(() => this.dataRead(reader));\n      // https://canjs.com/doc/can-ndjson-stream.html //errors!\n      // exampleStream.getReader().read().then(read);\n    });\n  };\n\n  injectPoisionPill = (callback) => {\n    this.customSetState(\n      { isMounted: false, readingState: State.Canceling },\n      callback\n    );\n  };\n\n  componentDidMount() {\n    console.log(\"componentDidMount\", this.props);\n    this.setState({ isMounted: true });\n    this.fetchData();\n  }\n\n  componentWillUnmount() {\n    console.log(\"componentWillUnmount\", this.props);\n    //cant set state here!\n  }\n\n  profile = (data, state) => {\n    return (\n      <div>\n        <span> Id:</span>\n        <span> {data.id}</span>\n        <span> Percent:</span>\n        <span> {data.pong} % </span>\n        <span> TimeMs:</span>\n        <span> {data.timeMs}</span>\n        <span> Reading State:</span>\n        <span> {state}</span>\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        {this.state.data.id\n          ? this.profile(this.state.data, this.state.readingState)\n          : \"No Data\"}\n      </div>\n    );\n  }\n}\n\nclass PingPongWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { pingPong: null, pingPongRef: null };\n  }\n\n  componentDidMount() {\n    this.initPingPong();\n  }\n\n  componentDidUpdate() {\n    //forcing to replace objects\n    //helps redraw pingPong object\n    if (!this.state.pingPong) {\n      this.initPingPong();\n    }\n  }\n\n  setCancel = () => {\n    this.state.pingPongRef.current.setCancel();\n  };\n\n  injectPoisionPill = (callback) => {\n    this.state.pingPongRef.current.injectPoisionPill(callback);\n  };\n\n  initPingPong = () => {\n    if (this.state.pingPongRef) {\n      this.injectPoisionPill(() => {\n        this.setState({ pingPong: null, pingPongRef: null });\n      });\n    } else {\n      var localRef = React.createRef();\n      var ping = <PingPong ref={localRef} link={this.props.link} />;\n      this.setState({ pingPong: ping, pingPongRef: localRef });\n    }\n    return ping;\n  };\n\n  setExecute = () => {\n    this.initPingPong();\n  };\n\n  render() {\n    console.log(\"reloading!\", this.state);\n    return (\n      <div>\n        <div>{this.state.pingPong ? this.state.pingPong : \"\"}</div>\n        <div id=\"container\"></div>\n        <div\n          style={{\n            height: \"4vh\",\n            display: \"flex\",\n            flexDirection: \"row\",\n          }}\n        >\n          <button onClick={this.setExecute}>press me!</button>\n          <button onClick={this.setCancel}>Cancel!</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <div>\n      <header className=\"App-header\">\n        <div>\n          {Array(3)\n            .fill()\n            .map((notUsed, n) => (\n              <PingPongWrapper key={n} link={link0} />\n            ))}\n          <br />\n          {Array(3)\n            .fill()\n            .map((notUsed, n) => (\n              <PingPongWrapper key={n} link={link1} />\n            ))}\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}